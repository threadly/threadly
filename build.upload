apply from: 'build.shared'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = 1.11
targetCompatibility = 1.11

test {
  maxParallelForks = Math.max(1, (int)(Runtime.getRuntime().availableProcessors() / 2))
}

test.dependsOn("jar")

def findJVM() {
  String[] java11Paths = new String[4]
  java11Paths[0] = "/usr/lib/jvm/java-11-openjdk-amd64/lib/"
  java11Paths[1] = "/usr/lib/jvm/java-11-openjdk/lib/"
  java11Paths[2] = "/usr/lib/jvm/openjdk-11/lib/"
  java11Paths[3] = "/usr/lib/jvm/java-11-sun/lib/"
  for (String path : java11Paths) {
    if (new java.io.File(path).exists()) {
      return path
    }
  }
  return null
}

compileJava {
  def jvmPath = findJVM()
  if (jvmPath == null) {
    println 'Unable to find java 11 install, will cause failure so exiting now'
    println ''
    System.exit(1)
  }
  println 'Using java 11: ' + jvmPath
  options.bootstrapClasspath = fileTree(include: ['*.jar'], dir: jvmPath)
}

compileTestJava {
  options.compilerArgs << "-Xlint:all" << "-Xlint:-deprecation" << "-Werror"

  options.bootstrapClasspath = fileTree(include: ['*.jar'], dir: findJVM())
}

signing {
  sign configurations.archives
  if (! version.contains('SNAPSHOT')) {
    sign publishing.publications
  }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      pom {
        name = 'Threadly'
        description = 'A library of tools to assist with safe concurrent java development.'
        url = 'http://threadly.org/'
   
        scm {
          url = 'scm:git@github.com:threadly/threadly.git'
          connection = 'scm:git@github.com:threadly/threadly.git'
          developerConnection = 'scm:git@github.com:threadly/threadly.git'
        }
   
        issueManagement {
          system = 'GitHub'
          url = 'https://github.com/threadly/threadly/issues'
        }

        licenses {
          license {
            name = 'Mozilla Public License Version 2.0'
            url = 'https://www.mozilla.org/MPL/2.0/'
            distribution = 'repo'
          }
        }
 
        developers {
          developer {
            id = 'jent'
            name = 'Mike Jensen'
            email = 'jent@threadly.org'
          }
        }
      }

      from components.java

      artifact(sourcesJar) {
        classifier = 'sources'
      }
      artifact(javadocJar) {
        classifier = 'javadoc'
      }
    }
  }
  repositories {
    maven {
      def releasesRepoUrl =  "https://oss.sonatype.org/service/local/staging/deploy/maven2"
      def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
      credentials {
        username sonatypeUsername
        password sonatypePassword
      }
    }
  }
}

model {
  tasks.generatePomFileForMavenJavaPublication {
    destination = file("$buildDir/generated-pom.xml")
  }
  tasks.publishMavenJavaPublicationToMavenLocal {
    dependsOn project.tasks.signArchives
  }
  tasks.publishMavenJavaPublicationToMavenRepository {
    dependsOn project.tasks.signArchives
  }
}
