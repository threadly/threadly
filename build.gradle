apply from: 'build.shared'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'


jar.baseName="threadly"

// Add buildscript repository so gradle build process can bring in dependencies to execute tasks with
buildscript {
  repositories {
    maven {
      url "https://mvn.office.veloxity.com/artifactory/all/"
      credentials {
        username = artifactoryUsername
        password = artifactoryPassword
      }
    }
  }
}

// Add repository for regular dependency management
repositories {
  maven {
    url "https://mvn.office.veloxity.com/artifactory/all/"
    credentials {
      username = artifactoryUsername
      password = artifactoryPassword
    }
  }
}

// Define where to publish artifacts
publishing {
  repositories {
    maven {
      url version.endsWith('-SNAPSHOT') ?
              "https://mvn.office.veloxity.com/artifactory/VeloxitySnapshots" : "https://mvn.office.veloxity.com/artifactory/VeloxityInternal"
      credentials {
        username = artifactoryUsername
        password = artifactoryPassword
      }
    }
  }
}

plugins.withType(JavaPlugin) {
  checkstyle.sourceSets = [sourceSets.main]
}

test {
  maxParallelForks = Math.min(8, Math.max(1, (int)(Runtime.getRuntime().availableProcessors() / 2)))
  jacoco {
    excludes = ['**/package-info**','**/*Test']
    destinationFile = file("$buildDir/reports/jacoco/test.exec")
  }
}

build.dependsOn jacocoTestReport

jacocoTestReport {
  doFirst {
    classDirectories = fileTree(dir: 'build/classes/java/main', include: 'org/threadly/**')
    sourceDirectories = fileTree(dir: 'src/main/java', include: 'org/threadly/**')
  }
  reports {
    csv.enabled = false
    xml.enabled = true
    xml.destination = file("$buildDir/reports/jacoco/jacoco.xml")
    html.enabled = true
    html.destination = file("$buildDir/reports/jacoco/html")
  }
  doLast {
    println "Test results available at:"
    println "html - $buildDir/reports/tests/html/index.html"
    println "Test coverage reports available at:"
    println "html - $buildDir/reports/jacoco/html/index.html"
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        counter = 'METHOD'
        minimum = 0.9
      }
    }
    rule {
      limit {
        counter = 'CLASS'
        minimum = 0.9
      }
    }
    rule {
      limit {
        counter = 'LINE'
        minimum = 0.9
      }
    }
    rule {
      limit {
        counter = 'BRANCH'
        minimum = 0.8
      }
    }
  }
}
check.dependsOn jacocoTestCoverageVerification


publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = jar.baseName
      from components.java


      artifact sourcesJar
      artifact javadocJar
    }
  }
}